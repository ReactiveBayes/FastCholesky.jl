var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = FastCholesky","category":"page"},{"location":"#FastCholesky","page":"Home","title":"FastCholesky","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package exports fastcholesky function, which works exactly like the cholesky from the Julia, but faster!","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [FastCholesky]","category":"page"},{"location":"#FastCholesky.cholinv-Tuple{AbstractMatrix}","page":"Home","title":"FastCholesky.cholinv","text":"cholinv(input)\n\nCalculate the inverse of the input matrix input using Cholesky factorization. This function is an alias for inv(fastcholesky(input)).\n\njulia> A = [4.0 2.0; 2.0 5.0];\n\njulia> A_inv = cholinv(A);\n\njulia> A_inv ≈ inv(A)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#FastCholesky.cholinv_logdet-Tuple{Any}","page":"Home","title":"FastCholesky.cholinv_logdet","text":"cholinv_logdet(input)\n\nCalculate the inverse and the natural logarithm of the determinant of the input matrix input simultaneously using Cholesky factorization.\n\njulia> A = [4.0 2.0; 2.0 5.0];\n\njulia> A_inv, logdet_A = cholinv_logdet(A);\n\njulia> isapprox(A_inv * A, I)\ntrue\n\njulia> isapprox(logdet_A, log(det(A)))\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#FastCholesky.chollogdet-Tuple{Any}","page":"Home","title":"FastCholesky.chollogdet","text":"chollogdet(input)\n\nCalculate the log-determinant of the input matrix input using Cholesky factorization. This function is an alias for logdet(fastcholesky(input)).\n\njulia> A = [4.0 2.0; 2.0 5.0];\n\njulia> logdet_A = chollogdet(A);\n\njulia> isapprox(logdet_A, log(det(A)))\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#FastCholesky.cholsqrt-Tuple{Any}","page":"Home","title":"FastCholesky.cholsqrt","text":"cholsqrt(input)\n\nCalculate the Cholesky square root of the input matrix input. This function is an alias for fastcholesky(input).L. NOTE: This is not equal to the standard matrix square root used in literature, which requires the result to be symmetric.\n\njulia> A = [4.0 2.0; 2.0 5.0];\n\njulia> A_sqrt = cholsqrt(A);\n\njulia> isapprox(A_sqrt * A_sqrt', A)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#FastCholesky.fastcholesky!","page":"Home","title":"FastCholesky.fastcholesky!","text":"fastcholesky!(input)\n\nCalculate the Cholesky factorization of the input matrix input in-place. This function is an in-place version of fastcholesky,  and it does not check the positive-definiteness of the input matrix or throw errors. You can use LinearAlgebra.issuccess to check if the result is a proper Cholesky factorization.\n\nnote: Note\nThis function does not verify the positive-definiteness of the input matrix and does not throw errors. Ensure that the input matrix is appropriate for Cholesky factorization before using this function.\n\njulia> C = fastcholesky!([ 1.0 0.5; 0.5 1.0 ]);\n\njulia> C.L * C.L' ≈ [ 1.0 0.5; 0.5 1.0 ]\ntrue\n\n\n\n\n\n","category":"function"},{"location":"#FastCholesky.fastcholesky-Tuple{AbstractMatrix}","page":"Home","title":"FastCholesky.fastcholesky","text":"fastcholesky(input)\n\nCalculate the Cholesky factorization of the input matrix input.  This function provides a more efficient implementation for certain input matrices compared to the standard LinearAlgebra.cholesky function.  By default, it falls back to using LinearAlgebra.cholesky(PositiveFactorizations.Positive, input), which means it does not require the input matrix to be perfectly symmetric.\n\nnote: Note\nThis function assumes that the input matrix is nearly positive definite, and it will attempt to make the smallest possible adjustments  to the matrix to ensure it becomes positive definite. Note that the magnitude of these adjustments may not necessarily be small, so it's important to use  this function only when you expect the input matrix to be nearly positive definite.\n\njulia> C = fastcholesky([ 1.0 0.5; 0.5 1.0 ]);\n\njulia> C.L * C.L' ≈ [ 1.0 0.5; 0.5 1.0 ]\ntrue\n\n\n\n\n\n","category":"method"}]
}
