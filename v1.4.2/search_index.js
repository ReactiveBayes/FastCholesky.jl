var documenterSearchIndex = {"docs":
[{"location":"#FastCholesky","page":"Home","title":"FastCholesky","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package exports fastcholesky function, which works exactly like the cholesky from the Julia, but faster!","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#FastCholesky.cholinv-Tuple{AbstractMatrix}","page":"Home","title":"FastCholesky.cholinv","text":"cholinv(input)\n\nCalculate the inverse of the input matrix input using Cholesky factorization. This function is an alias for inv(fastcholesky(input)).\n\njulia> A = [4.0 2.0; 2.0 5.0];\n\njulia> A_inv = cholinv(A);\n\njulia> A_inv ≈ inv(A)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#FastCholesky.cholinv_logdet-Tuple{Any}","page":"Home","title":"FastCholesky.cholinv_logdet","text":"cholinv_logdet(input)\n\nCalculate the inverse and the natural logarithm of the determinant of the input matrix input simultaneously using Cholesky factorization.\n\njulia> A = [4.0 2.0; 2.0 5.0];\n\njulia> A_inv, logdet_A = cholinv_logdet(A);\n\njulia> isapprox(A_inv * A, I)\ntrue\n\njulia> isapprox(logdet_A, log(det(A)))\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#FastCholesky.chollogdet-Tuple{Any}","page":"Home","title":"FastCholesky.chollogdet","text":"chollogdet(input)\n\nCalculate the log-determinant of the input matrix input using Cholesky factorization. This function is an alias for logdet(fastcholesky(input)).\n\njulia> A = [4.0 2.0; 2.0 5.0];\n\njulia> logdet_A = chollogdet(A);\n\njulia> isapprox(logdet_A, log(det(A)))\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#FastCholesky.cholsqrt-Tuple{Any}","page":"Home","title":"FastCholesky.cholsqrt","text":"cholsqrt(input)\n\nCalculate the Cholesky square root of the input matrix input. This function is an alias for fastcholesky(input).L. NOTE: This is not equal to the standard matrix square root used in literature, which requires the result to be symmetric.\n\njulia> A = [4.0 2.0; 2.0 5.0];\n\njulia> A_sqrt = cholsqrt(A);\n\njulia> isapprox(A_sqrt * A_sqrt', A)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#FastCholesky.fastcholesky!","page":"Home","title":"FastCholesky.fastcholesky!","text":"fastcholesky!(input; fallback_gmw81=true, symmetrize_input=true, gmw81_tol=PositiveFactorizations.default_δ(input), symmetric_tol=1e-8)\n\nCalculate the Cholesky factorization of the input matrix input in-place. This function is an in-place version of fastcholesky. It first checks if the input matrix is symmetric, and if it is, it will use the built-in Cholesky factorization by wrapping the input in a Hermitian matrix. If the input matrix is not symmetric and symmetrize_input=true, it will symmetrize the input matrix and try again recursively. If the input matrix is not symmetrics, not positive definite, and fallback_gmw81=true, it will use the GMW81 algorithm as a fallback. In other cases, it will throw an error.\n\nKeyword arguments\n\nfallback_gmw81::Bool=true: If true, the function will use the GMW81 algorithm as a fallback if the input matrix is not positive definite.\nsymmetrize_input::Bool=true: If true, the function will symmetrize the input matrix before retrying the Cholesky factorization in case if the first attempt failed.\ngmw81_tol::Real=PositiveFactorizations.default_δ(input): The tolerance for the positive-definiteness of the input matrix for the GMW81 algorithm.\nsymmetric_tol::Real=1e-8: The tolerance for the symmetry of the input matrix.\n\nEnvironment Variables\n\nThe behavior of this function regarding non-symmetric matrices can be controlled through environment variables:\n\nJULIA_FASTCHOLESKY_NO_WARN_NON_SYMMETRIC=1: Set this to suppress warnings about non-symmetric input matrices\nJULIA_FASTCHOLESKY_THROW_ERROR_NON_SYMMETRIC=1: Set this to make the function error instead of warn when encountering non-symmetric matrices\n\nnote: Note\nUse this function only when you expect the input matrix to be nearly positive definite.\n\njulia> C = fastcholesky!([ 1.0 0.5; 0.5 1.0 ]);\n\njulia> C.L * C.L' ≈ [ 1.0 0.5; 0.5 1.0 ]\ntrue\n\n\n\n\n\n","category":"function"},{"location":"#FastCholesky.fastcholesky-Tuple{AbstractMatrix}","page":"Home","title":"FastCholesky.fastcholesky","text":"fastcholesky(input)\n\nCalculate the Cholesky factorization of the input matrix input.  This function provides a more efficient implementation for certain input matrices compared to the standard LinearAlgebra.cholesky function.  By default, it falls back to using LinearAlgebra.cholesky(PositiveFactorizations.Positive, input), which means it does not require the input matrix to be perfectly symmetric.\n\nnote: Note\nThis function assumes that the input matrix is nearly positive definite, and it will attempt to make the smallest possible adjustments  to the matrix to ensure it becomes positive definite. Note that the magnitude of these adjustments may not necessarily be small, so it's important to use  this function only when you expect the input matrix to be nearly positive definite.\n\nEnvironment Variables\n\nThe behavior of this function regarding non-symmetric matrices can be controlled through environment variables:\n\nJULIA_FASTCHOLESKY_NO_WARN_NON_SYMMETRIC=1: Set this to suppress warnings about non-symmetric input matrices\nJULIA_FASTCHOLESKY_THROW_ERROR_NON_SYMMETRIC=1: Set this to make the function error instead of warn when encountering non-symmetric matrices\n\njulia> C = fastcholesky([ 1.0 0.5; 0.5 1.0 ]);\n\njulia> C.L * C.L' ≈ [ 1.0 0.5; 0.5 1.0 ]\ntrue\n\n\n\n\n\n","category":"method"}]
}
